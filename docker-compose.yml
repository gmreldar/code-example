version: '3'
services:
    nginx:
        build:
            context: "./docker/nginx"
            args:
                - NGINX_HOST_HTTP_PORT=${NGINX_HOST_HTTP_PORT}
        depends_on:
            - php-fpm
        environment:
            XDEBUG: "true"
            XDEBUG_CONFIG: "remote_host=host.docker.internal remote_enable=1"
            PHP_IDE_CONFIG: "serverName=0.0.0.0"
            XDEBUG_MODE: '${XDEBUG_MODE:-off}'
        volumes:
            - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
            - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
            - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
        ports:
            - "${NGINX_HOST_HTTP_PORT}:80"
        networks:
            - auto-wallet-network

    php-fpm:
        build:
            context: "./docker/php-fpm"
        environment:
            XDEBUG: "true"
            XDEBUG_CONFIG: "remote_host=host.docker.internal remote_enable=1"
            PHP_IDE_CONFIG: "serverName=0.0.0.0"
            XDEBUG_MODE: '${XDEBUG_MODE:-off}'
        volumes:
            - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
        networks:
            - auto-wallet-network
        expose:
            - "9000"

    pgsql:
        image: 'postgres:13'
        ports:
            - '${FORWARD_DB_PORT:-5432}:${DB_PORT}'
        environment:
            PGPASSWORD: '${DB_PASSWORD:-root}'
            POSTGRES_DB: '${DB_DATABASE}'
            POSTGRES_USER: '${DB_USERNAME}'
            POSTGRES_PASSWORD: '${DB_PASSWORD:-root}'
        volumes:
            - 'auto-wallet-pgsql:/var/lib/postgresql/data'
            - './dumps/pg:/dumps/pg'
        networks:
            - auto-wallet-network
        healthcheck:
            test: [ "CMD", "pg_isready", "-q", "-d", "${DB_DATABASE}", "-U", "${DB_USERNAME}" ]
            retries: 3
            timeout: 5s

    redis:
        image: 'redis:alpine'
        ports:
            - '${FORWARD_REDIS_PORT:-6379}:${REDIS_PORT}'
        volumes:
            - 'auto-wallet-redis:/data'
        networks:
            - auto-wallet-network
        healthcheck:
            test: [ "CMD", "redis-cli", "ping" ]
            retries: 3
            timeout: 5s

    mongo:
        image: mongo:6
        restart: always
        ports:
            - "${FORWARD_MONGO_PORT}:${MONGO_PORT}"
        volumes:
            - './dumps/mongo:/dumps/mongo'
        environment:
            MONGO_INITDB_ROOT_USERNAME: '${MONGO_USER}'
            MONGO_INITDB_ROOT_PASSWORD: '${MONGO_PASSWORD}'
            MONGO_INITDB_DATABASE: '${MONGO_DATABASE}'
        networks:
            - auto-wallet-network
        healthcheck:
            test: test $$(mongosh --port ${MONGO_PORT} --quiet --eval "try {rs.initiate({_id:'my-replica-set',members:[{_id:0,host:\"mongo:${MONGO_PORT}\"}]})} catch(e) {rs.status().ok}") -eq 1
            interval: 10s

networks:
    auto-wallet-network:
        driver: bridge
volumes:
    auto-wallet-redis:
        driver: local
    auto-wallet-pgsql:
        driver: local
